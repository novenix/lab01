# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

import java.util.ArrayList;
import java.util.Scanner;
import java.util.*;
/**
 * Write a description of class Molecule here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Molecule
{
    // instance variables - replace the example below with your own
    
    
    
    
    private Rectangle molecule;
    private Rectangle p1;
    //mp1 se define como un cuadrado peque√±o dentro de p1 que representa el signo menos
    private Rectangle mp1;
    private Rectangle p2;
    private Rectangle mp2;
    private Rectangle p3;
    private Rectangle mp3;
    private Rectangle p4;
    private Rectangle mp4;
    private ArrayList ref;
    private Rectangle pr;
    private Rectangle prm;
    private String tipo;
    private Rectangle actual;
    
    
    
    
        
    /**
     * Constructor for objects of class Molecule
     */
    public Molecule()
    {
       Scanner sc = new Scanner(System.in);  //crear un objeto Scanner
        
        Scanner cadena=new Scanner(System.in);
        System.out.println("ingrese cadena para saber caracteristicas molecula");
        String carac = cadena.nextLine();
        tipo=carac;
        ArrayList lista= new ArrayList();
        String[] parts= carac.split(" ");
        String part1= parts[0];
        String part2= parts[1];
        String part3= parts[2];
        String part4= parts[3];
        
        lista.add(part1);
        lista.add(part2);
        lista.add(part3);
        lista.add(part4);

        System.out.println(lista+"Lista");
        System.out.println(lista);
        molecule = new Rectangle();
            
        String act="p1";
            
        String s1;
        String s2;
        //molecule.makeVisible();
        mp1=null;
        mp2=null;
        mp3=null;
        mp4=null;
           for (int cont=0;cont<4;cont++){
            String p=new String();
            System.out.println(lista.get(cont)+"actual con cont");
            System.out.println((lista.get(cont)+" actual con cont "+cont));
            s1=part1.substring(1,1);
            s2=part1.substring(0,0);
            actual=null;
            
            if (cont==0){
                p1=actual;
                act="p1";
                s1=part1.substring(0,1);
                s2=part1.substring(1,2);
                System.out.println(s1 +" s1");
                System.out.println(s2 +" s2");
            }
            if (cont==1){
                //actual=p2;
                p2=actual;
                act="p2";
                s1=part2.substring(0,1);
                s2=part2.substring(1,2);
                System.out.println(s1 +" s1");
                System.out.println(s2 +" s2");
            }
            if (cont==2){
                p3=actual;
                //actual=p3;
                act="p3";
                s1=part3.substring(0,1);
                s2=part3.substring(1,2);
                System.out.println(s1 +" s1");
                System.out.println(s2 +" s2");
            }
            if (cont==3){
                p4=actual;
                //actual=p4;
                act="p4";
                s1=part4.substring(0,1);
                s2=part4.substring(1,2);
                System.out.println(s1 +" s1");
                System.out.println(s2 +" s2");
            }
            
            System.out.println(act+" rectangulo act"+actual);       
            
            System.out.println(lista.get(cont)+"cont");
            char f1= s1.charAt(0);
            if (s1=="00"){
                f1=0;
            }
            char f2= s2.charAt(0);
            if (s2=="00"){
                f2=0;
            }
            
            if (  f2 == '+'){
                if (cont==0){
                    System.out.println("mas==+");
                    actual = new Rectangle();
                    actual.changeSize(20,20);
                    actual.xPosition = 20;
                    actual.yPosition = 0;
                }
                if (cont==1){
                    System.out.println("mas==+");
                    actual = new Rectangle();
                    actual.changeSize(20,20);
                    actual.xPosition = 40;
                    actual.yPosition = 20;
                }
                if (cont==2){
                    System.out.println("mas==+");
                    actual = new Rectangle();
                    actual.changeSize(20,20);
                    actual.xPosition = 20;
                    actual.yPosition = 40;
                }
                if (cont==3){
                    System.out.println("mas==+");
                    actual = new Rectangle();
                    actual.changeSize(20,20);
                    actual.xPosition = 0;
                    actual.yPosition = 20;
                }
            }
            if (f2 =='-'){
                
                if (cont==0){
                    
                    System.out.println("menos");
                    actual = new Rectangle();
                    mp1= new Rectangle();
                    System.out.println(mp1+"mp1");
                    mp1.xPosition= 25;
                    mp1.yPosition=5;
                    mp1.changeSize(10,10);
                    mp1.changeColor("white");
                   
                    actual.xPosition = 20;
                    actual.yPosition = 0;
                    actual.changeSize(20,20);
                }
                if (cont==1){
                    System.out.println("menos");
                    actual = new Rectangle();
                    mp2= new Rectangle();
                    mp2.xPosition= 45;
                    mp2.yPosition=25;
                  
                    mp2.changeSize(10,10);
                    mp2.changeColor("white");
                    
                    System.out.println(mp2+"mp2");
                    actual.xPosition =40;
                    actual.yPosition = 20;
                    actual.changeSize(20,20);
                }
                if (cont==2){
                    System.out.println("menos");
                    actual = new Rectangle();
                    mp3= new Rectangle();
                    mp3.xPosition= 25;
                    mp3.yPosition=45;
                    mp3.changeSize(10,10);
                    mp3.changeColor("white");
                    
                    actual.xPosition = 20;
                    actual.yPosition = 40;
                    actual.changeSize(20,20);
                }
                if (cont==3){
                    System.out.println("menos");
                    actual = new Rectangle();
                    mp4= new Rectangle();
                    mp4.xPosition= 5;
                    mp4.yPosition=25;
                    mp4.changeSize(10,10);
                    mp4.changeColor("white");
                    
                    actual.xPosition = 0;
                    actual.yPosition = 20;
                    actual.changeSize(20,20);
                }
            }
            else if (f2=='0'){
                
                if (cont==0){
                    System.out.println("cero");
                    actual = new Rectangle();
                   
                    actual.xPosition = 20;
                    actual.yPosition = 0;
                    actual.changeSize(20,20);
                }
                if (cont==1){
                    System.out.println("cero");
                    actual = new Rectangle();
                    
                    actual.xPosition =40;
                    actual.yPosition = 20;
                    actual.changeSize(20,20);
                }
                if (cont==2){
                    System.out.println("cero");
                    actual = new Rectangle();
                    
                    actual.xPosition = 20;
                    actual.yPosition = 40;
                    actual.changeSize(20,20);
                }
                if (cont==3){
                    System.out.println("cero");
                    actual = new Rectangle();
                    
                    
                    actual.xPosition = 0;
                    actual.yPosition = 20;
                    actual.changeSize(20,20);
                }
            }
            
            //s2= lista.toString().charAt(cont+2);
            System.out.println(s2+" s2");
            if (f1 =='A'){
                    actual.changeColor("black");
                    System.out.println("A-negro");
                    
                  
            }
            else if (f1 =='B'){
                    actual.changeColor("green");
                    System.out.println("b-green");
                    
            
            
            }
       
            else if (f1 =='C'){
                    actual.changeColor("blue");
                    System.out.println("c-blue");
                    
             }
           else if (f1 =='D'){
                    actual.changeColor("yellow");
                    System.out.println("d-yellow");
               
            }
           else if ( f1 == '0') {
               actual.changeColor("red");
               System.out.println("d-red");
            }
             
             
            
            if (cont==0){
                p1=actual;
               
            }
            if (cont==1){
                p2=actual;
               
            }
            if (cont==2){
                p3=actual;
               
            }
            if (cont==3){
                p4=actual;
               
            }
            
            System.out.println(actual+"actual final");
            System.out.println(cont+" cont");
            System.out.println("cambio______________________________");
            
        }
        System.out.println("mp1 "+mp1);
        makeVisible();
        //try except de el cuadrado peque√±o
        
    }

    
    public void moverMol(){
        
    }
    public void getType(){
        System.out.println(tipo);
    }
    
    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    public void makeVisible(){
        molecule.makeVisible();
        //System.out.println(p1+"patata");
        p1.makeVisible();
        p2.makeVisible();
        p3.makeVisible();
        p4.makeVisible();
        
        if (mp1!= null){
            mp1.makeVisible();
        }
        if (mp2!= null){
            mp2.makeVisible();
        }
        if (mp3!= null){
            mp3.makeVisible();
        }
        if (mp4!= null){
            mp4.makeVisible();
        }
        
    }
    
    public void makeInvisible(){
        molecule.makeInvisible();
        p1.makeInvisible();
        p2.makeInvisible();
        p3.makeInvisible();
        p4.makeInvisible();
        if (mp1!= null){
            mp1.makeInvisible();
        }
        if (mp2!= null){
            mp2.makeInvisible();
        }
        if (mp3!= null){
            mp3.makeInvisible();
        }
        if (mp4!= null){
            mp4.makeInvisible();
        }
    }
    boolean b1,b2,b3,b4=false;
     
    public void rotate(){
       
        makeInvisible();
        pr=new Rectangle();
        pr.xPosition=0;
        pr.yPosition=0;
        System.out.println(pr+" pr");
        System.out.println(p1+" p1");
        System.out.println(p1.xPosition+" posicion x");
        pr.xPosition = p1.xPosition;
        pr.yPosition = p1.yPosition;
        p1.xPosition = p2.xPosition;
        p1.yPosition = p2.yPosition;
        p2.xPosition = p3.xPosition;
        p2.yPosition = p3.yPosition;
        p3.xPosition = p4.xPosition;
        p3.yPosition = p4.yPosition;
        p4.xPosition = pr.xPosition;
        p4.yPosition = pr.yPosition;
        prm=new Rectangle();
        prm.xPosition=0;
        prm.yPosition=0;
       
        if (mp1== null){
            System.out.println(mp1+"mp1");
            mp1= new Rectangle();
            mp1.xPosition= 25;
            mp1.yPosition=5;
            String color=p1.getColor();
            mp1.changeColor(color);
            mp1.changeSize(10,10);
            b1=true;
        
        }
        
        if (mp2== null){
            System.out.println(mp1+"mp1");
            mp2= new Rectangle();
            mp2.xPosition= 45;
            mp2.yPosition=25;
            String color=p2.getColor();
            mp2.changeColor(color);   
            mp2.changeSize(10,10);
            b2=true;
        
        }
        
        if (mp3== null){
            System.out.println(mp1+"mp1");
            mp3= new Rectangle();
           mp3.xPosition= 25;
           mp3.yPosition=45;
           String color=p3.getColor();
            mp3.changeColor(color);     
            mp3.changeSize(10,10);
           b3=true;
        
        }
        
        if (mp4== null){
            System.out.println(mp1+"mp1");
            mp4= new Rectangle();
           mp4.xPosition= 5;
           mp4.yPosition=25;
           String color=p4.getColor();
            mp4.changeColor(color);
           mp4.changeSize(10,10);
            b4=true;
        
        }
        prm.xPosition=mp1.xPosition;
        prm.yPosition=mp1.yPosition;
        mp1.xPosition=mp2.xPosition;
        mp1.yPosition=mp2.yPosition;
        mp2.xPosition=mp3.xPosition;
        mp2.yPosition=mp3.yPosition;
        mp3.xPosition=mp4.xPosition;
        mp3.yPosition=mp4.yPosition;
        mp4.xPosition=prm.xPosition;
        mp4.yPosition=prm.yPosition;
        if (b1==true){
            mp1.erase();
            b1=false;
        }
        if (b2==true){
            mp2.erase();
            b2=false;
        }
        if (b3==true){
            mp3.erase();
            b3=false;
        }
        if (b4==true){
            mp4.erase();
            b4=false;
        }
        
        makeVisible();
        }
     
    public void reflect(){
        makeInvisible();
        
        pr.xPosition = p1.xPosition;
        pr.yPosition = p1.yPosition;
        p1.xPosition = p3.xPosition;
        p1.yPosition = p3.yPosition;
        p3.xPosition = pr.xPosition;
        p3.yPosition = pr.yPosition;
        pr.xPosition = p2.xPosition;
        pr.yPosition = p2.yPosition;
        p2.xPosition = p4.xPosition;
        p2.yPosition = p4.yPosition;
        p4.xPosition = pr.xPosition;
        p4.yPosition = pr.yPosition;
        
        prm=new Rectangle();
        prm.xPosition=0;
        prm.yPosition=0;
       
        if (mp1== null){
            System.out.println(mp1+"mp1");
            mp1= new Rectangle();
            mp1.xPosition= 25;
            mp1.yPosition=5;
            String color=p1.getColor();
            mp1.changeColor(color);
            mp1.changeSize(10,10);
            b1=true;
        
        }
        
        if (mp2== null){
            System.out.println(mp1+"mp1");
            mp2= new Rectangle();
            mp2.xPosition= 45;
            mp2.yPosition=25;
            String color=p2.getColor();
            mp2.changeColor(color);   
            mp2.changeSize(10,10);
            b2=true;
        
        }
        
        if (mp3== null){
            System.out.println(mp1+"mp1");
            mp3= new Rectangle();
           mp3.xPosition= 25;
           mp3.yPosition=45;
           String color=p3.getColor();
            mp3.changeColor(color);     
            mp3.changeSize(10,10);
           b3=true;
        
        }
        
        if (mp4== null){
            System.out.println(mp1+"mp1");
            mp4= new Rectangle();
           mp4.xPosition= 5;
           mp4.yPosition=25;
           String color=p4.getColor();
            mp4.changeColor(color);
           mp4.changeSize(10,10);
            b4=true;
        
        }
        prm.xPosition = mp1.xPosition;
        prm.yPosition = mp1.yPosition;
        mp1.xPosition = mp3.xPosition;
        mp1.yPosition = mp3.yPosition;
        mp3.xPosition = prm.xPosition;
        mp3.yPosition = prm.yPosition;
        prm.xPosition = mp2.xPosition;
        prm.yPosition = mp2.yPosition;
        mp2.xPosition = mp4.xPosition;
        mp2.yPosition = mp4.yPosition;
        mp4.xPosition = prm.xPosition;
        mp4.yPosition = prm.yPosition;
        
        
        
        if (b1==true){
            mp1.erase();
            b1=false;
        }
        if (b2==true){
            mp2.erase();
            b2=false;
        }
        if (b3==true){
            mp3.erase();
            b3=false;
        }
        if (b4==true){
            mp4.erase();
            b4=false;
        }
        makeVisible();
    }
       
    public void moveRight(){
        makeInvisible();
        molecule.moveHorizontal(60);
        p1.moveHorizontal(60);
        p2.moveHorizontal(60);
        p3.moveHorizontal(60);
        p4.moveHorizontal(60);
        if (mp1!= null){
            mp1.moveHorizontal(60);
        }
        if (mp2!= null){
            mp2.moveHorizontal(60);
        }
        if (mp3!= null){
            mp3.moveHorizontal(60);
        }
        if (mp4!= null){
            mp4.moveHorizontal(60);
        }
        makeVisible();
    }
    
    public void moveDown(){
        makeInvisible();
        molecule.moveVertical(60);
        p1.moveVertical(60);
        p2.moveVertical(60);
        p3.moveVertical(60);
        p4.moveVertical(60);
        if (mp1!= null){
            mp1.moveVertical(60);
        }
        if (mp2!= null){
            mp2.moveVertical(60);
        }
        if (mp3!= null){
            mp3.moveVertical(60);
        }
        if (mp4!= null){
            mp4.moveVertical(60);
        }
        makeVisible();
    }
    //esta funcion debe recibir cuanto moverse hacia la derecha desde  otro lado en molecula
    public void slowMoveHorizontal(int distance){
        molecule.slowMoveHorizontal(distance);
        p1.slowMoveHorizontal(distance);
        p2.slowMoveHorizontal(distance);
        p3.slowMoveHorizontal(distance);
        p4.slowMoveHorizontal(distance);
        if (mp1!= null){
            mp1.slowMoveHorizontal(distance);
        }
        if (mp2!= null){
            mp2.slowMoveHorizontal(distance);
        }
        if (mp3!= null){
            mp3.slowMoveHorizontal(distance);
        }
        if (mp4!= null){
            mp4.slowMoveHorizontal(distance);
        }
    }
    //esta funcion debe recibir cuanto moverse hacia la derecha desde  otro lado en molecula
    public void slowMoveVertical(int distance){
        molecule.slowMoveVertical(distance);
        p1.slowMoveVertical(distance);
        p2.slowMoveVertical(distance);
        p3.slowMoveVertical(distance);
        p4.slowMoveVertical(distance);
        if (mp1!= null){
            mp1.slowMoveVertical(distance);
        }
        if (mp2!= null){
            mp2.slowMoveVertical(distance);
        }
        if (mp3!= null){
            mp3.slowMoveVertical(distance);
        }
        if (mp4!= null){
            mp4.slowMoveVertical(distance);
        }
    }
 }

import java.awt.*;

/**
 * A rectangle that can be manipulated and that draws itself on a canvas.
 * 
 * @author  Michael Kolling and David J. Barnes (Modified)
 * @version 1.0  (15 July 2000)()
 */


 
public class Rectangle{

    private int height;
    private int width;
    public int xPosition;
    public int yPosition;
    private String color;
    public String colori;
    private boolean isVisible;

    /**
     * Create a new rectangle at default position with default color.
     */
    public Rectangle(){
        height = 60;
        width = 60;
        xPosition = 0;
        yPosition = 0;
        color = "magenta";
        isVisible = false;
    }
    

    /**
     * Make this rectangle visible. If it was already visible, do nothing.
     */
    public void makeVisible(){
        isVisible = true;
        draw();
    }
    
    /**
     * Make this rectangle invisible. If it was already invisible, do nothing.
     */
    public void makeInvisible(){
        erase();
        isVisible = false;
    }
    
    /**
     * Move the rectangle a few pixels to the right.
     */
    public void moveRight(){
        moveHorizontal(20);
    }

    /**
     * Move the rectangle a few pixels to the left.
     */
    public void moveLeft(){
        moveHorizontal(-20);
    }

    /**
     * Move the rectangle a few pixels up.
     */
    public void moveUp(){
        moveVertical(-20);
    }

    /**
     * Move the rectangle a few pixels down.
     */
    public void moveDown(){
        moveVertical(20);
    }

    /**
     * Move the rectangle horizontally.
     * @param distance the desired distance in pixels
     */
    public void moveHorizontal(int distance){
        erase();
        xPosition += distance;
        draw();
    }

    /**
     * Move the rectangle vertically.
     * @param distance the desired distance in pixels
     */
    public void moveVertical(int distance){
        erase();
        yPosition += distance;
        draw();
    }

    /**
     * Slowly move the rectangle horizontally.
     * @param distance the desired distance in pixels
     */
    public void slowMoveHorizontal(int distance){
        int delta;

        if(distance < 0) {
            delta = -1;
            distance = -distance;
        } else {
            delta = 1;
        }

        for(int i = 0; i < distance; i++){
            xPosition += delta;
            draw();
        }
    }

    /**
     * Slowly move the rectangle vertically.
     * @param distance the desired distance in pixels
     */
    public void slowMoveVertical(int distance){
        int delta;

        if(distance < 0) {
            delta = -1;
            distance = -distance;
        } else {
            delta = 1;
        }

        for(int i = 0; i < distance; i++){
            yPosition += delta;
            draw();
        }
    }

    /**
     * Change the size to the new size
     * @param newHeight the new height in pixels. newHeight must be >=0.
     * @param newWidht the new width in pixels. newWidth must be >=0.
     */
    public void changeSize(int newHeight, int newWidth) {
        erase();
        height = newHeight;
        width = newWidth;
        draw();
    }
    
    /**
     * Change the color. 
     * @param color the new color. Valid colors are "red", "yellow", "blue", "green",
     * "magenta" and "black".
     */
    public void changeColor(String newColor){
        color = newColor;
        colori= color;
        draw();
    }
    public String getColor(){
        //colori=colori;
        System.out.println(colori);
        
        return colori;
        
    }
    /*
     * Draw the rectangle with current specifications on screen.
     */

    private void draw() {
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            canvas.draw(this, color,
                new java.awt.Rectangle(xPosition, yPosition, width, height));
            canvas.wait(10);
        }
    }

    /*
     * Erase the rectangle on screen.
     */
    public void erase(){
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            canvas.erase(this);
        }
    }
    
    public int getX(){
       return xPosition;
    }
    
    public int gety(){
       return yPosition;
    }
    
    public void es(){
        System.out.println("Hola");
    }
}

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.*;
import java.awt.Graphics;
import javax.swing.JFrame;

/**
 * Canvas is a class to allow for simple graphical drawing on a canvas.
 * This is a modification of the general purpose Canvas, specially made for
 * the BlueJ "shapes" example. 
 *
 * @author: Bruce Quig
 * @author: Michael Kolling (mik)
 *
 * @version: 1.6 (shapes)
 */
public class Canvas{
    // Note: The implementation of this class (specifically the handling of
    // shape identity and colors) is slightly more complex than necessary. This
    // is done on purpose to keep the interface and instance fields of the
    // shape objects in this project clean and simple for educational purposes.

	private static Canvas canvasSingleton;

	/**
	 * Factory method to get the canvas singleton object.
	 */
	public static Canvas getCanvas(){
		if(canvasSingleton == null) {
			canvasSingleton = new Canvas("BlueJ Shapes Demo", 300, 300, 
										 Color.white);
		}
		canvasSingleton.setVisible(true);
		return canvasSingleton;
	}

	//  ----- instance part -----

    private JFrame frame;
    private CanvasPane canvas;
    private Graphics2D graphic;
    private Color backgroundColour;
    private Image canvasImage;
    private List <Object> objects;
    private HashMap <Object,ShapeDescription> shapes;
    
    /**
     * Create a Canvas.
     * @param title  title to appear in Canvas Frame
     * @param width  the desired width for the canvas
     * @param height  the desired height for the canvas
     * @param bgClour  the desired background colour of the canvas
     */
    private Canvas(String title, int width, int height, Color bgColour){
        frame = new JFrame();
        canvas = new CanvasPane();
        frame.setContentPane(canvas);
        frame.setTitle(title);
        canvas.setPreferredSize(new Dimension(width, height));
        backgroundColour = bgColour;
        frame.pack();
        objects = new ArrayList <Object>();
        shapes = new HashMap <Object,ShapeDescription>();
    }

    /**
     * Set the canvas visibility and brings canvas to the front of screen
     * when made visible. This method can also be used to bring an already
     * visible canvas to the front of other windows.
     * @param visible  boolean value representing the desired visibility of
     * the canvas (true or false) 
     */
    public void setVisible(boolean visible){
        if(graphic == null) {
            // first time: instantiate the offscreen image and fill it with
            // the background colour
            Dimension size = canvas.getSize();
            canvasImage = canvas.createImage(size.width, size.height);
            graphic = (Graphics2D)canvasImage.getGraphics();
            graphic.setColor(backgroundColour);
            graphic.fillRect(0, 0, size.width, size.height);
            graphic.setColor(Color.black);
        }
        frame.setVisible(visible);
    }

    /**
     * Draw a given shape onto the canvas.
     * @param  referenceObject  an object to define identity for this shape
     * @param  color            the color of the shape
     * @param  shape            the shape object to be drawn on the canvas
     */
     // Note: this is a slightly backwards way of maintaining the shape
     // objects. It is carefully designed to keep the visible shape interfaces
     // in this project clean and simple for educational purposes.
    public void draw(Object referenceObject, String color, Shape shape){
    	objects.remove(referenceObject);   // just in case it was already there
    	objects.add(referenceObject);      // add at the end
    	shapes.put(referenceObject, new ShapeDescription(shape, color));
    	redraw();
    }
 
    /**
     * Erase a given shape's from the screen.
     * @param  referenceObject  the shape object to be erased 
     */
    public void erase(Object referenceObject){
    	objects.remove(referenceObject);   // just in case it was already there
    	shapes.remove(referenceObject);
    	redraw();
    }

    /**
     * Set the foreground colour of the Canvas.
     * @param  newColour   the new colour for the foreground of the Canvas 
     */
    public void setForegroundColor(String colorString){
		if(colorString.equals("red"))
			graphic.setColor(Color.red);
		else if(colorString.equals("black"))
			graphic.setColor(Color.black);
		else if(colorString.equals("blue"))
			graphic.setColor(Color.blue);
		else if(colorString.equals("yellow"))
			graphic.setColor(Color.yellow);
		else if(colorString.equals("green"))
			graphic.setColor(Color.green);
		else if(colorString.equals("magenta"))
			graphic.setColor(Color.magenta);
		else if(colorString.equals("white"))
			graphic.setColor(Color.white);
		else
			graphic.setColor(Color.black);
    }

    /**
     * Wait for a specified number of milliseconds before finishing.
     * This provides an easy way to specify a small delay which can be
     * used when producing animations.
     * @param  milliseconds  the number 
     */
    public void wait(int milliseconds){
        try{
            Thread.sleep(milliseconds);
        } catch (Exception e){
            // ignoring exception at the moment
        }
    }

	/**
	 * Redraw ell shapes currently on the Canvas.
	 */
	private void redraw(){
		erase();
		for(Iterator i=objects.iterator(); i.hasNext(); ) {
                       shapes.get(i.next()).draw(graphic);
        }
        canvas.repaint();
    }
       
    /**
     * Erase the whole canvas. (Does not repaint.)
     */
    private void erase(){
        Color original = graphic.getColor();
        graphic.setColor(backgroundColour);
        Dimension size = canvas.getSize();
        graphic.fill(new java.awt.Rectangle(0, 0, size.width, size.height));
        graphic.setColor(original);
    }


    /************************************************************************
     * Inner class CanvasPane - the actual canvas component contained in the
     * Canvas frame. This is essentially a JPanel with added capability to
     * refresh the image drawn on it.
     */
    private class CanvasPane extends JPanel{
        public void paint(Graphics g){
            g.drawImage(canvasImage, 0, 0, null);
        }
    }
   
    /************************************************************************
     * Inner class CanvasPane - the actual canvas component contained in the
     * Canvas frame. This is essentially a JPanel with added capability to
     * refresh the image drawn on it.
     */
    private class ShapeDescription{
    	private Shape shape;
    	private String colorString;

		public ShapeDescription(Shape shape, String color){
    		this.shape = shape;
    		colorString = color;
    	}

		public void draw(Graphics2D graphic){
			setForegroundColor(colorString);
			graphic.fill(shape);
		}
    }

}


 
